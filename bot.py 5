import discord
import json
import random
import os
import uuid
import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict
from discord import app_commands, ui
from discord.ui import Modal, TextInput, View, Button, Select
from discord.ext import commands
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
WORDS_FILE = os.getenv("WORDS_FILE", "words.txt")
MAX_ATTEMPTS = 6
MAX_HINTS = 3
DATA_FILE = "wordle_data.json"
CONFIG_FILE = "server_config.json"

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

def get_scope_label(scope: str) -> str:
    return "Server" if scope == "server" else "Global"

class ServerConfig:
    def __init__(self):
        self.config = self.load_config()
    
    def load_config(self):
        try:
            with open(CONFIG_FILE) as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}
    
    def save_config(self):
        with open(CONFIG_FILE, "w") as f:
            json.dump(self.config, f, indent=2)
    
    def set_wordle_channel(self, guild_id: int, channel_id: int):
        self.config[str(guild_id)] = channel_id
        self.save_config()
    
    def get_wordle_channel(self, guild_id: int) -> Optional[int]:
        return self.config.get(str(guild_id))

class GameHistory:
    def __init__(self):
        self.data = self.load_data()
    
    def load_data(self):
        try:
            with open(DATA_FILE) as f:
                data = json.load(f)
                return self.validate_data_structure(data)
        except (FileNotFoundError, json.JSONDecodeError):
            return self.default_data_structure()
    
    def validate_data_structure(self, data):
        if "guilds" not in data:
            data["guilds"] = {}
        if "global" not in data:
            data["global"] = {"users": {}}
        return data
    
    def default_data_structure(self):
        return {"guilds": {}, "global": {"users": {}}}
    
    def save_data(self):
        with open(DATA_FILE, "w") as f:
            json.dump(self.data, f, indent=2)
    
    def add_game(self, guild_id: int, user_id: int, game_data: dict):
        guild_str = str(guild_id)
        user_str = str(user_id)
        game_entry = self.create_game_entry(game_data)
        
        if guild_str not in self.data["guilds"]:
            self.data["guilds"][guild_str] = {"users": {}}
        if user_str not in self.data["guilds"][guild_str]["users"]:
            self.data["guilds"][guild_str]["users"][user_str] = []
        self.data["guilds"][guild_str]["users"][user_str].insert(0, game_entry)
        
        if user_str not in self.data["global"]["users"]:
            self.data["global"]["users"][user_str] = []
        self.data["global"]["users"][user_str].insert(0, game_entry)
        
        self.save_data()
    
    def create_game_entry(self, game_data: dict) -> dict:
        return {
            "id": str(uuid.uuid4())[:8].upper(),
            "timestamp": datetime.now().isoformat(),
            "won": game_data["won"],
            "word": game_data["word"],
            "attempts": len(game_data["guesses"]),
            "hints": game_data["hints"],
            "guesses": [{"word": g[0], "result": g[1]} for g in game_data["guesses"]],
            "duration": game_data["duration"]
        }
    
    def get_leaderboard(self, scope: str, guild_id: Optional[int] = None) -> List[dict]:
        source = self.data["global"] if scope == "global" else self.data["guilds"].get(str(guild_id), {"users": {}})
        leaderboard = []
        
        for user_id, games in source["users"].items():
            wins = sum(1 for g in games if g["won"])
            total = len(games)
            leaderboard.append({
                "user_id": int(user_id),
                "wins": wins,
                "total": total,
                "win_rate": wins/total if total > 0 else 0,
                "avg_attempts": sum(g["attempts"] for g in games)/total if total > 0 else 0
            })
        return sorted(leaderboard, key=lambda x: (-x["wins"], -x["win_rate"]))
    
    def get_user_games(self, user_id: int, scope: str, guild_id: Optional[int] = None) -> List[dict]:
        source = self.data["global"] if scope == "global" else self.data["guilds"].get(str(guild_id), {"users": {}})
        return source["users"].get(str(user_id), [])

class WordleGame:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.secret_word = random.choice(WORDS)
        self.attempts = []
        self.remaining = MAX_ATTEMPTS
        self.hints_used = 0
        self.start_time = datetime.now()
        self.correct_positions = [False]*5
        self.hinted_letters = set()
    
    def get_duration(self):
        return (datetime.now() - self.start_time).total_seconds()
    
    def check_guess(self, guess: str) -> List[str]:
        self.correct_positions = [False]*5
        secret = list(self.secret_word)
        result = []
        
        for i in range(5):
            if guess[i] == secret[i]:
                result.append("üü©")
                self.correct_positions[i] = True
                secret[i] = None
            else:
                result.append("")
        
        for i in range(5):
            if result[i] == "üü©":
                continue
            if guess[i] in secret:
                result[i] = "üü®"
                secret[secret.index(guess[i])] = None
            else:
                result[i] = "‚¨õ"
        
        self.attempts.append((guess, result.copy()))
        self.remaining -= 1
        return result
    
    def add_hint(self):
        if self.hints_used >= MAX_HINTS:
            return False
        hidden = [i for i, correct in enumerate(self.correct_positions) if not correct]
        if not hidden:
            return False
        pos = random.choice(hidden)
        self.hinted_letters.add(self.secret_word[pos])
        self.hints_used += 1
        return True
    
    @property
    def hint_display(self):
        return " ".join(
            c.upper() if self.correct_positions[i] or c in self.hinted_letters else "‚ñ¢"
            for i, c in enumerate(self.secret_word)
        )

class ScopeSwitcher:
    @staticmethod
    def create_buttons(current_scope: str):
        server_btn = Button(
            label="Server",
            style=discord.ButtonStyle.primary if current_scope == "server" else discord.ButtonStyle.secondary,
            row=0
        )
        
        global_btn = Button(
            label="Global",
            style=discord.ButtonStyle.primary if current_scope == "global" else discord.ButtonStyle.secondary,
            row=0
        )
        return server_btn, global_btn

class EnhancedLeaderboardView(View):
    def __init__(self, cog, guild_id: Optional[int], scope: str = "global"):
        super().__init__(timeout=60)
        self.cog = cog
        self.guild_id = guild_id
        self.scope = scope
        self.leaderboard_data = []
        self.initialize_data()
        self.create_components()
    
    def initialize_data(self):
        self.leaderboard_data = self.cog.history.get_leaderboard(self.scope, self.guild_id)[:10]
    
    def create_components(self):
        self.clear_items()
        server_btn, global_btn = ScopeSwitcher.create_buttons(self.scope)
        
        server_btn.callback = lambda i: self.switch_scope(i, "server")
        global_btn.callback = lambda i: self.switch_scope(i, "global")
        
        self.add_item(server_btn)
        self.add_item(global_btn)
        
        sorts = {
            "üèÜ Siege": "wins",
            "üìà Winrate": "win_rate",
            "üéØ Avg. Versuche": "avg_attempts"
        }
        
        for label, mode in sorts.items():
            btn = Button(label=label, style=discord.ButtonStyle.secondary, row=1)
            btn.callback = lambda i, m=mode: self.sort_leaderboard(i, m)
            self.add_item(btn)
        
        if self.leaderboard_data:
            options = [
                discord.SelectOption(
                    label=self.cog.bot.get_user(entry["user_id"]).display_name[:25],
                    value=str(entry["user_id"])
                )
                for entry in self.leaderboard_data
            ]
            select = Select(placeholder="üéñÔ∏è Spieler ausw√§hlen", options=options, row=2)
            select.callback = self.select_player
            self.add_item(select)
    
    async def switch_scope(self, interaction: discord.Interaction, scope: str):
        self.scope = scope
        self.guild_id = interaction.guild.id if scope == "server" else None
        self.initialize_data()
        await interaction.response.edit_message(
            embed=self.create_leaderboard_embed(),
            view=self
        )
    
    async def sort_leaderboard(self, interaction: discord.Interaction, mode: str):
        self.leaderboard_data.sort(key=lambda x: x[mode], reverse=True)
        await interaction.response.edit_message(embed=self.create_leaderboard_embed(mode))
    
    async def select_player(self, interaction: discord.Interaction):
        selected_id = int(self.children[-1].values[0])
        view = HistoryView(self.cog, selected_id, self.guild_id, self.scope)
        await interaction.response.edit_message(embed=view.create_history_embed(), view=view)
    
    def create_leaderboard_embed(self, sort_mode: str = "wins"):
        sorted_data = sorted(self.leaderboard_data, key=lambda x: x[sort_mode], reverse=True)
        
        embed = discord.Embed(
            title=f"üèÜ {get_scope_label(self.scope)} Rangliste - {sort_mode.replace('_', ' ').title()}",
            color=discord.Color.gold()
        )
        
        for idx, entry in enumerate(sorted_data[:10], 1):
            user = self.cog.bot.get_user(entry["user_id"])
            name = user.display_name if user else f"Unbekannt ({entry['user_id']})"
            
            embed.add_field(
                name=f"{idx}. {name}",
                value=(
                    f"Siege: {entry['wins']}\n"
                    f"Spiele: {entry['total']}\n"
                    f"Winrate: {entry['win_rate']:.0%}\n"
                    f"Avg. Versuche: {entry['avg_attempts']:.1f}"
                ),
                inline=False
            )
        return embed

class HistoryView(View):
    def __init__(self, cog, user_id: int, guild_id: Optional[int], scope: str, page: int = 0):
        super().__init__(timeout=60)
        self.cog = cog
        self.user_id = user_id
        self.guild_id = guild_id
        self.scope = scope
        self.page = page
        self.update_buttons()
    
    def get_games(self):
        return self.cog.history.get_user_games(
            self.user_id,
            self.scope,
            self.guild_id
        )
    
    def create_history_embed(self) -> discord.Embed:
        games = self.get_games()
        total_pages = max(len(games), 1)
        
        embed = discord.Embed(
            title=f"üìú {get_scope_label(self.scope)} Historie - Seite {self.page + 1}/{total_pages}",
            color=discord.Color.blue()
        )
        
        if games and self.page < len(games):
            game = games[self.page]
            status = "‚úÖ Gewonnen" if game["won"] else "‚ùå Verloren"
            date = datetime.fromisoformat(game["timestamp"]).strftime("%d.%m.%Y %H:%M")
            duration = self.cog.format_duration(game["duration"])
            
            embed.description = f"**{status}** ‚Ä¢ {date} ‚Ä¢ {duration}"
            embed.add_field(name="Wort", value=f"||{game['word'].upper()}||", inline=False)
            
            attempts = []
            for idx, guess in enumerate(game["guesses"]):
                attempts.append(
                    f"**Versuch {idx + 1}:** {guess['word'].upper()}\n"
                    f"{' '.join(guess['result'])}"
                )
            embed.add_field(name="Versuche", value="\n\n".join(attempts) or "Keine Versuche", inline=False)
            embed.add_field(name="Tipps verwendet", value=game["hints"], inline=True)
            embed.set_footer(text=f"Spiel-ID: {game['id']}")
        else:
            embed.description = "üì≠ Keine Spiele im gew√§hlten Bereich!"
            
        return embed
    
    def update_buttons(self):
        games = self.get_games()
        total_pages = max(len(games), 1)
        self.children[0].disabled = self.page <= 0
        self.children[1].disabled = self.page <= 0
        self.children[2].disabled = self.page >= total_pages - 1
        self.children[3].disabled = self.page >= total_pages - 1
    
    @ui.button(emoji="‚èÆÔ∏è", style=discord.ButtonStyle.gray)
    async def first_page(self, interaction: discord.Interaction, button: Button):
        self.page = 0
        self.update_buttons()
        await interaction.response.edit_message(embed=self.create_history_embed(), view=self)
    
    @ui.button(emoji="‚¨ÖÔ∏è", style=discord.ButtonStyle.gray)
    async def prev_page(self, interaction: discord.Interaction, button: Button):
        self.page -= 1
        self.update_buttons()
        await interaction.response.edit_message(embed=self.create_history_embed(), view=self)
    
    @ui.button(emoji="‚û°Ô∏è", style=discord.ButtonStyle.gray)
    async def next_page(self, interaction: discord.Interaction, button: Button):
        self.page += 1
        self.update_buttons()
        await interaction.response.edit_message(embed=self.create_history_embed(), view=self)
    
    @ui.button(emoji="‚è≠Ô∏è", style=discord.ButtonStyle.gray)
    async def last_page(self, interaction: discord.Interaction, button: Button):
        self.page = len(self.get_games()) - 1
        self.update_buttons()
        await interaction.response.edit_message(embed=self.create_history_embed(), view=self)
    
    @ui.button(emoji="üåê", style=discord.ButtonStyle.gray)
    async def switch_scope(self, interaction: discord.Interaction, button: Button):
        self.scope = "global" if self.scope == "server" else "server"
        self.guild_id = interaction.guild.id if self.scope == "server" else None
        self.page = 0
        self.update_buttons()
        await interaction.response.edit_message(embed=self.create_history_embed(), view=self)

class WordleCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.games: Dict[int, WordleGame] = {}
        self.history = GameHistory()
        self.config = ServerConfig()
        self.persistent_views_added = False
    
    async def add_persistent_views(self):
        if not self.persistent_views_added:
            self.bot.add_view(MainMenu(self))
            self.persistent_views_added = True
    
    async def start_new_game(self, interaction: discord.Interaction):
        if interaction.user.id in self.games:
            await interaction.response.send_message("‚ùå Du hast bereits ein aktives Spiel!", ephemeral=True)
            return
            
        self.games[interaction.user.id] = WordleGame(interaction.user.id)
        view = GameView(self, interaction.user.id)
        await interaction.response.send_message(embed=self.create_game_embed(), view=view)
    
    @app_commands.command(name="wordle", description="Starte ein neues Wordle-Spiel")
    async def wordle(self, interaction: discord.Interaction):
        await self.start_new_game(interaction)
    
    def create_game_embed(self):
        embed = discord.Embed(
            title="üéÆ Neues Wordle-Spiel",
            description="üî§ Errate das geheime 5-Buchstaben-Wort in 6 Versuchen!\n\n"
                      "üí° **Tipps:**\n"
                      "- üü© = Richtiger Buchstabe am richtigen Platz\n"
                      "- üü® = Richtiger Buchstabe am falschen Platz\n"
                      "- ‚¨õ = Buchstabe nicht im Wort",
            color=discord.Color.green()
        )
        embed.add_field(
            name="Steuerung",
            value=f"‚Ä¢ ‚úèÔ∏è Raten - Wort eingeben\n‚Ä¢ üí° Tipp - Buchstaben enth√ºllen (max. {MAX_HINTS}x)\n‚Ä¢ üóëÔ∏è Beenden - Spiel abbrechen",
            inline=False
        )
        return embed
    
    def format_duration(self, seconds: float) -> str:
        minutes, seconds = divmod(seconds, 60)
        return f"{int(minutes)}m {int(seconds)}s"
    
    @app_commands.command(name="wordle_setup", description="Richte den Wordle-Channel ein")
    @app_commands.default_permissions(administrator=True)
    async def wordle_setup(self, interaction: discord.Interaction):
        self.config.set_wordle_channel(interaction.guild_id, interaction.channel_id)
        main_embed = discord.Embed(
            title="üéÆ Wordle-Hauptmen√º",
            description="üåü Teste dein Vokabular und errate das geheime Wort!",
            color=discord.Color.blue()
        )
        try:
            await interaction.channel.purge(limit=1)
        except:
            pass
        await interaction.channel.send(embed=main_embed, view=MainMenu(self))
        await interaction.response.send_message("‚úÖ Channel erfolgreich eingerichtet!", ephemeral=True)
    
    async def handle_process_guess(self, interaction: discord.Interaction, guess: str):
        try:
            if interaction.user.id not in self.games:
                await interaction.response.send_message("‚ùå Starte erst ein Spiel!", ephemeral=True)
                return
            
            game = self.games[interaction.user.id]
            
            if len(guess) != 5 or not guess.isalpha():
                await interaction.response.send_message("‚ùå Ung√ºltige Eingabe!", ephemeral=True)
                return
            
            result = game.check_guess(guess)
            embed = discord.Embed(
                title=f"Wordle - {MAX_ATTEMPTS} Versuche",
                description=f"Verbleibende Versuche: {game.remaining}",
                color=discord.Color.blurple()
            )
            
            for idx, (attempt, res) in enumerate(game.attempts):
                embed.add_field(
                    name=f"Versuch {idx + 1}",
                    value=f"**{attempt.upper()}**\n{' '.join(res)}",
                    inline=False
                )
            
            embed.add_field(name="Aktueller Hinweis", value=f"`{game.hint_display}`", inline=False)
            
            if guess == game.secret_word or game.remaining == 0:
                await self.handle_end_game(interaction, guess == game.secret_word)
            else:
                view = GameView(self, interaction.user.id)
                await interaction.response.edit_message(embed=embed, view=view)
        
        except Exception as e:
            print(f"Fehler beim Raten: {e}")
            await interaction.response.send_message("‚ùå Fehler beim Verarbeiten des Versuchs!", ephemeral=True)

    async def handle_give_hint(self, interaction: discord.Interaction):
        try:
            if interaction.user.id not in self.games:
                await interaction.response.send_message("‚ùå Starte erst ein Spiel!", ephemeral=True)
                return
            
            game = self.games[interaction.user.id]
            if not game.add_hint():
                await interaction.response.send_message("‚ùå Maximal 3 Tipps pro Spiel!", ephemeral=True)
                return
            
            embed = interaction.message.embeds[0]
            embed.set_field_at(
                -1,
                name="Aktueller Hinweis",
                value=f"`{game.hint_display}`",
                inline=False
            )
            
            view = GameView(self, interaction.user.id)
            await interaction.response.edit_message(embed=embed, view=view)
        
        except Exception as e:
            print(f"Fehler bei Tipp: {e}")
            await interaction.response.send_message("‚ùå Fehler beim Verarbeiten des Tipps!", ephemeral=True)

    async def handle_end_game(self, interaction: discord.Interaction, won: bool):
        try:
            if interaction.user.id not in self.games:
                return
            
            game = self.games.pop(interaction.user.id)
            self.history.add_game(interaction.guild_id, interaction.user.id, {
                "won": won,
                "word": game.secret_word,
                "guesses": game.attempts,
                "hints": game.hints_used,
                "duration": game.get_duration()
            })
            
            embed = discord.Embed(
                title="üéâ Gewonnen!" if won else "üí• Verloren!",
                description=f"Das Wort war: ||{game.secret_word.upper()}||",
                color=discord.Color.green() if won else discord.Color.red()
            )
            
            final_view = View(timeout=60)
            final_view.add_item(Button(
                label="Neues Spiel üéÆ", 
                style=discord.ButtonStyle.success,
                custom_id=f"newgame_{interaction.user.id}"
            ))
            final_view.add_item(Button(
                label="Statistiken üìä", 
                style=discord.ButtonStyle.primary,
                custom_id=f"stats_{interaction.user.id}"
            ))
            
            await interaction.response.edit_message(embed=embed, view=final_view)
            await asyncio.sleep(30)
            try:
                await interaction.delete_original_response()
            except discord.NotFound:
                pass
        
        except Exception as e:
            print(f"Fehler beim Beenden: {e}")

    async def handle_show_stats(self, interaction: discord.Interaction):
        try:
            user_games = self.history.get_user_games(interaction.user.id, "global")
            total_games = len(user_games)
            wins = sum(1 for g in user_games if g["won"])
            
            embed = discord.Embed(
                title=f"üìä Statistiken f√ºr {interaction.user.name}",
                color=discord.Color.gold()
            )
            
            if total_games > 0:
                current_streak = 0
                for game in user_games:
                    if game["won"]:
                        current_streak += 1
                    else:
                        break
                
                avg_attempts = sum(g["attempts"] for g in user_games)/total_games
                avg_hints = sum(g["hints"] for g in user_games)/total_games
                total_duration = sum(g["duration"] for g in user_games)
                
                embed.description = (
                    f"**Gesamtspiele:** {total_games}\n"
                    f"**Gesamtspielzeit:** {self.format_duration(total_duration)}\n"
                    f"**Winrate:** {(wins/total_games):.0%}"
                )
                embed.add_field(name="üèÜ Gewonnen", value=wins, inline=True)
                embed.add_field(name="üí• Verloren", value=total_games - wins, inline=True)
                embed.add_field(name="üî• Aktuelle Serie", value=current_streak, inline=True)
                embed.add_field(name="üéØ Durchschn. Versuche", value=f"{avg_attempts:.1f}", inline=True)
                embed.add_field(name="üí° Durchschn. Tipps", value=f"{avg_hints:.1f}", inline=True)
            else:
                embed.description = "üì≠ Keine Spiele gespielt!"
            
            view = View()
            history_btn = Button(label="Historie anzeigen", style=discord.ButtonStyle.primary, custom_id="show_history")
            history_btn.callback = lambda i: self.handle_show_history(i)
            view.add_item(history_btn)
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        except Exception as e:
            print(f"Fehler in Statistiken: {e}")
            await interaction.response.send_message("‚ùå Fehler beim Laden der Statistiken!", ephemeral=True)

    async def handle_show_leaderboard(self, interaction: discord.Interaction):
        try:
            view = EnhancedLeaderboardView(self, interaction.guild.id, "server")
            await interaction.response.send_message(
                embed=view.create_leaderboard_embed(),
                view=view,
                ephemeral=True
            )
        except Exception as e:
            print(f"Fehler in Rangliste: {e}")
            await interaction.response.send_message("‚ùå Fehler beim Laden der Rangliste!", ephemeral=True)

    async def handle_show_history(self, interaction: discord.Interaction):
        try:
            view = HistoryView(self, interaction.user.id, interaction.guild.id, "server")
            await interaction.response.send_message(embed=view.create_history_embed(), view=view, ephemeral=True)
        except Exception as e:
            print(f"Fehler in Historie: {e}")
            await interaction.response.send_message("‚ùå Fehler beim Laden der Historie!", ephemeral=True)

class MainMenu(View):
    def __init__(self, cog):
        super().__init__(timeout=None)
        self.cog = cog
    
    @ui.button(label="Neues Spiel üéÆ", style=discord.ButtonStyle.green, custom_id="new_game")
    async def new_game(self, interaction: discord.Interaction, button: Button):
        await self.cog.start_new_game(interaction)
    
    @ui.button(label="Leaderboard üèÜ", style=discord.ButtonStyle.blurple, custom_id="leaderboard")
    async def show_leaderboard(self, interaction: discord.Interaction, button: Button):
        await self.cog.handle_show_leaderboard(interaction)
    
    @ui.button(label="Statistiken üìä", style=discord.ButtonStyle.gray, custom_id="stats")
    async def show_stats(self, interaction: discord.Interaction, button: Button):
        await self.cog.handle_show_stats(interaction)
    
    @ui.button(label="Historie üìú", style=discord.ButtonStyle.secondary, custom_id="history")
    async def show_history(self, interaction: discord.Interaction, button: Button):
        await self.cog.handle_show_history(interaction)
    
    @ui.button(label="Hilfe ‚ùì", style=discord.ButtonStyle.secondary, custom_id="help")
    async def show_help(self, interaction: discord.Interaction, button: Button):
        embed = discord.Embed(
            title="‚ùì Wordle-Hilfe",
            description=(
                "üåü **Spielregeln:**\n"
                "1. Errate das 5-Buchstaben-Wort in 6 Versuchen\n"
                "2. Farben zeigen Treffergenauigkeit:\n"
                "   üü© = Richtiger Buchstabe an richtiger Position\n"
                "   üü® = Buchstabe im Wort, aber falsche Position\n"
                "   ‚¨õ = Buchstabe nicht im Wort\n\n"
                "üí° **Tipps:**\n"
                "- Nutze maximal 3 Tipps pro Spiel\n"
                "- Vergleiche dich mit anderen √ºber die Ranglisten\n"
                "- √úberpr√ºfe deine Spielhistorie mit dem Historie-Button\n"
                "- Administratoren k√∂nnen mit /wordle_setup einen Channel einrichten"
            ),
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

class GameView(View):
    def __init__(self, cog, user_id: int):
        super().__init__(timeout=300)
        self.cog = cog
        self.user_id = user_id
        self.update_buttons()
    
    def update_buttons(self):
        game = self.cog.games.get(self.user_id)
        hint_count = game.hints_used if game else 0
        
        self.clear_items()
        
        guess_btn = Button(
            style=discord.ButtonStyle.primary,
            label="Raten ‚úèÔ∏è",
            custom_id=f"guess_{self.user_id}"
        )
        guess_btn.callback = self.guess_callback
        
        hint_btn = Button(
            style=discord.ButtonStyle.secondary,
            label=f"Tipp üí° ({hint_count}/{MAX_HINTS})",
            custom_id=f"hint_{self.user_id}",
            disabled=hint_count >= MAX_HINTS
        )
        hint_btn.callback = self.hint_callback
        
        quit_btn = Button(
            style=discord.ButtonStyle.danger,
            label="Beenden üóëÔ∏è",
            custom_id=f"quit_{self.user_id}"
        )
        quit_btn.callback = self.quit_callback
        
        self.add_item(guess_btn)
        self.add_item(hint_btn)
        self.add_item(quit_btn)
    
    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Dies ist nicht dein Spiel!", ephemeral=True)
            return False
        return True
    
    async def guess_callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(GuessModal(self.cog))
    
    async def hint_callback(self, interaction: discord.Interaction):
        await self.cog.handle_give_hint(interaction)
    
    async def quit_callback(self, interaction: discord.Interaction):
        await self.cog.handle_end_game(interaction, won=False)

class GuessModal(Modal, title="Wordle-Ratespiel"):
    guess = TextInput(
        label="Gib dein 5-Buchstaben-Wort ein",
        placeholder="Beispiel: apfel",
        min_length=5,
        max_length=5
    )
    
    def __init__(self, cog):
        super().__init__()
        self.cog = cog
    
    async def on_submit(self, interaction: discord.Interaction):
        await self.cog.handle_process_guess(interaction, self.guess.value.lower())

@bot.event
async def on_ready():
    await bot.add_cog(WordleCog(bot))
    cog = bot.get_cog("WordleCog")
    await cog.add_persistent_views()
    await bot.tree.sync()
    
    for guild in bot.guilds:
        if channel_id := cog.config.get_wordle_channel(guild.id):
            channel = guild.get_channel(channel_id)
            if channel:
                try:
                    await channel.purge(limit=1)
                    main_embed = discord.Embed(
                        title="üéÆ Wordle-Hauptmen√º",
                        description="üåü Klicke auf 'Neues Spiel üéÆ' um zu starten!",
                        color=discord.Color.blue()
                    )
                    await channel.send(embed=main_embed, view=MainMenu(cog))
                except:
                    pass
    print(f"{bot.user} ist bereit!")

if __name__ == "__main__":
    if not os.path.exists(WORDS_FILE):
        with open(WORDS_FILE, "w") as f:
            f.write("apfel\nbirne\nbanane\nmango\nbeere\n")
        print(f"Beispiel-W√∂rterdatei {WORDS_FILE} erstellt!")
    
    with open(WORDS_FILE) as f:
        WORDS = [word.strip().lower() for word in f.readlines() if len(word.strip()) == 5]
    
    if not WORDS:
        raise ValueError("Keine g√ºltigen W√∂rter in der Datei!")
    
    bot.run(TOKEN)
